{"path":"notes/Courses and Tutorials/Udemy Courses/Complete guide to building an app with DotNet Core and React/StudentAssets/StudentAssets/section 18 challenge/Instructions.pdf","text":"1 - Instructions 1. Create an Edit handler to update the profile. We only want to validate against the display name here as we do not ask the user for a bio when they register so we want to allow this to be optional. 2. Update the ProfilesController and add an endpoint for editing the profile. 3. Test the endpoint in Postman using the 3 requests in the Module 18 folder. 1. If we try and update the profile again without changing it we will get a 400 bad request as there were no changes to save to the Database. 2. Is there a way we can accept the same data coming in and tell EF the entity has been modified even if it has not? 4. Updating the client. Add a new request in the agent.ts. Hint: We need to use Partial<Profile> for the type here as we are only allowing the user to update 2 of the properties contained in the Profile type. 5. Add a helper method in the user store to set the display name. 6. Add a method to update the profile in the profile store. The types are a bit tricky here as we are setting the Profile with the existing profile and overwriting any changes to the profile from the partial profile we are passing in as a parameter so we need to make use of the ‘as Profile’ to make TypeScript happy. 7. Create a Profile Edit form component in the Profiles feature folder. Hint: We need to control the state of whether we are displaying the form or the user info here so we need some state in the parent to control this. 8. Create a ProfileAbout component that will make use of the form, as well as displaying the user bio. Hint: the style “whiteSpace: ‘pre-wrap” will preserve line breaks that are entered into the text area here if added to the span. 9. Update the ProfileContent component to display the profile. You can either pass this down as props or get it directly from the profile store. 10. Update the Profile Card to show the user bio. 11. Test it works. If someone has a lot of text in their profile then it will make our attendee cards look quite bad, so add a truncate function to restrict the amount of text displayed in the attendee profile cards. 12. Feature complete! Now we can commit our changes into source control in preparation for the next section. #reactivities/section 18#","libVersion":"0.3.2","langs":""}